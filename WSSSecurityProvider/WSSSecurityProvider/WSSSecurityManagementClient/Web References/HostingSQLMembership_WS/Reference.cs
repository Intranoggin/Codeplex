//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1433.
// 
#pragma warning disable 1591

namespace MyLocalBroadband.WSSSecurityManagement.Client.HostingSQLMembership_WS {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SQLMembershipServiceSoap", Namespace="http://www.mylocalbroadband.com/")]
    public partial class SQLMembershipService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetUserPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserListOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateSiteMappingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSiteMappingOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetApplicationNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetApplicationNameOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SQLMembershipService() {
            this.Url = global::MyLocalBroadband.WSSSecurityManagement.Client.Properties.Settings.Default.MyLocalBroadband_WSSSecurityManagement_Client_HostingSQLMembership_WS_SQLMembershipService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateUserCompletedEventHandler CreateUserCompleted;
        
        /// <remarks/>
        public event DeleteUserCompletedEventHandler DeleteUserCompleted;
        
        /// <remarks/>
        public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;
        
        /// <remarks/>
        public event ResetUserPasswordCompletedEventHandler ResetUserPasswordCompleted;
        
        /// <remarks/>
        public event GetUserListCompletedEventHandler GetUserListCompleted;
        
        /// <remarks/>
        public event FindUserCompletedEventHandler FindUserCompleted;
        
        /// <remarks/>
        public event CreateSiteMappingCompletedEventHandler CreateSiteMappingCompleted;
        
        /// <remarks/>
        public event GetSiteMappingCompletedEventHandler GetSiteMappingCompleted;
        
        /// <remarks/>
        public event SetApplicationNameCompletedEventHandler SetApplicationNameCompleted;
        
        /// <remarks/>
        public event GetApplicationNameCompletedEventHandler GetApplicationNameCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/CreateUser", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateUser(string appName, string userName, string userPassword, string userEmail, string userPasswordQuestion, string userPasswordAnswer, bool MappedApplication) {
            this.Invoke("CreateUser", new object[] {
                        appName,
                        userName,
                        userPassword,
                        userEmail,
                        userPasswordQuestion,
                        userPasswordAnswer,
                        MappedApplication});
        }
        
        /// <remarks/>
        public void CreateUserAsync(string appName, string userName, string userPassword, string userEmail, string userPasswordQuestion, string userPasswordAnswer, bool MappedApplication) {
            this.CreateUserAsync(appName, userName, userPassword, userEmail, userPasswordQuestion, userPasswordAnswer, MappedApplication, null);
        }
        
        /// <remarks/>
        public void CreateUserAsync(string appName, string userName, string userPassword, string userEmail, string userPasswordQuestion, string userPasswordAnswer, bool MappedApplication, object userState) {
            if ((this.CreateUserOperationCompleted == null)) {
                this.CreateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateUserOperationCompleted);
            }
            this.InvokeAsync("CreateUser", new object[] {
                        appName,
                        userName,
                        userPassword,
                        userEmail,
                        userPasswordQuestion,
                        userPasswordAnswer,
                        MappedApplication}, this.CreateUserOperationCompleted, userState);
        }
        
        private void OnCreateUserOperationCompleted(object arg) {
            if ((this.CreateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/DeleteUser", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteUser(string appName, string userName, bool MappedApplication) {
            this.Invoke("DeleteUser", new object[] {
                        appName,
                        userName,
                        MappedApplication});
        }
        
        /// <remarks/>
        public void DeleteUserAsync(string appName, string userName, bool MappedApplication) {
            this.DeleteUserAsync(appName, userName, MappedApplication, null);
        }
        
        /// <remarks/>
        public void DeleteUserAsync(string appName, string userName, bool MappedApplication, object userState) {
            if ((this.DeleteUserOperationCompleted == null)) {
                this.DeleteUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserOperationCompleted);
            }
            this.InvokeAsync("DeleteUser", new object[] {
                        appName,
                        userName,
                        MappedApplication}, this.DeleteUserOperationCompleted, userState);
        }
        
        private void OnDeleteUserOperationCompleted(object arg) {
            if ((this.DeleteUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/ChangePassword", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangePassword(string appName, string userName, string oldPassword, string newPassword, bool MappedApplication) {
            this.Invoke("ChangePassword", new object[] {
                        appName,
                        userName,
                        oldPassword,
                        newPassword,
                        MappedApplication});
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string appName, string userName, string oldPassword, string newPassword, bool MappedApplication) {
            this.ChangePasswordAsync(appName, userName, oldPassword, newPassword, MappedApplication, null);
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string appName, string userName, string oldPassword, string newPassword, bool MappedApplication, object userState) {
            if ((this.ChangePasswordOperationCompleted == null)) {
                this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordOperationCompleted);
            }
            this.InvokeAsync("ChangePassword", new object[] {
                        appName,
                        userName,
                        oldPassword,
                        newPassword,
                        MappedApplication}, this.ChangePasswordOperationCompleted, userState);
        }
        
        private void OnChangePasswordOperationCompleted(object arg) {
            if ((this.ChangePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/ResetUserPassword", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ResetUserPassword(string appName, string userName, bool MappedApplication) {
            object[] results = this.Invoke("ResetUserPassword", new object[] {
                        appName,
                        userName,
                        MappedApplication});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ResetUserPasswordAsync(string appName, string userName, bool MappedApplication) {
            this.ResetUserPasswordAsync(appName, userName, MappedApplication, null);
        }
        
        /// <remarks/>
        public void ResetUserPasswordAsync(string appName, string userName, bool MappedApplication, object userState) {
            if ((this.ResetUserPasswordOperationCompleted == null)) {
                this.ResetUserPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetUserPasswordOperationCompleted);
            }
            this.InvokeAsync("ResetUserPassword", new object[] {
                        appName,
                        userName,
                        MappedApplication}, this.ResetUserPasswordOperationCompleted, userState);
        }
        
        private void OnResetUserPasswordOperationCompleted(object arg) {
            if ((this.ResetUserPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetUserPasswordCompleted(this, new ResetUserPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/GetUserList", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserList(string appName, bool MappedApplication) {
            object[] results = this.Invoke("GetUserList", new object[] {
                        appName,
                        MappedApplication});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserListAsync(string appName, bool MappedApplication) {
            this.GetUserListAsync(appName, MappedApplication, null);
        }
        
        /// <remarks/>
        public void GetUserListAsync(string appName, bool MappedApplication, object userState) {
            if ((this.GetUserListOperationCompleted == null)) {
                this.GetUserListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserListOperationCompleted);
            }
            this.InvokeAsync("GetUserList", new object[] {
                        appName,
                        MappedApplication}, this.GetUserListOperationCompleted, userState);
        }
        
        private void OnGetUserListOperationCompleted(object arg) {
            if ((this.GetUserListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserListCompleted(this, new GetUserListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/FindUser", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FindUser(string appName, string userName, bool MappedApplication) {
            object[] results = this.Invoke("FindUser", new object[] {
                        appName,
                        userName,
                        MappedApplication});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FindUserAsync(string appName, string userName, bool MappedApplication) {
            this.FindUserAsync(appName, userName, MappedApplication, null);
        }
        
        /// <remarks/>
        public void FindUserAsync(string appName, string userName, bool MappedApplication, object userState) {
            if ((this.FindUserOperationCompleted == null)) {
                this.FindUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindUserOperationCompleted);
            }
            this.InvokeAsync("FindUser", new object[] {
                        appName,
                        userName,
                        MappedApplication}, this.FindUserOperationCompleted, userState);
        }
        
        private void OnFindUserOperationCompleted(object arg) {
            if ((this.FindUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindUserCompleted(this, new FindUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/CreateSiteMapping", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateSiteMapping(string appName, string siteURL) {
            this.Invoke("CreateSiteMapping", new object[] {
                        appName,
                        siteURL});
        }
        
        /// <remarks/>
        public void CreateSiteMappingAsync(string appName, string siteURL) {
            this.CreateSiteMappingAsync(appName, siteURL, null);
        }
        
        /// <remarks/>
        public void CreateSiteMappingAsync(string appName, string siteURL, object userState) {
            if ((this.CreateSiteMappingOperationCompleted == null)) {
                this.CreateSiteMappingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSiteMappingOperationCompleted);
            }
            this.InvokeAsync("CreateSiteMapping", new object[] {
                        appName,
                        siteURL}, this.CreateSiteMappingOperationCompleted, userState);
        }
        
        private void OnCreateSiteMappingOperationCompleted(object arg) {
            if ((this.CreateSiteMappingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSiteMappingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/GetSiteMapping", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSiteMapping(string siteURL) {
            object[] results = this.Invoke("GetSiteMapping", new object[] {
                        siteURL});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSiteMappingAsync(string siteURL) {
            this.GetSiteMappingAsync(siteURL, null);
        }
        
        /// <remarks/>
        public void GetSiteMappingAsync(string siteURL, object userState) {
            if ((this.GetSiteMappingOperationCompleted == null)) {
                this.GetSiteMappingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiteMappingOperationCompleted);
            }
            this.InvokeAsync("GetSiteMapping", new object[] {
                        siteURL}, this.GetSiteMappingOperationCompleted, userState);
        }
        
        private void OnGetSiteMappingOperationCompleted(object arg) {
            if ((this.GetSiteMappingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiteMappingCompleted(this, new GetSiteMappingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/SetApplicationName", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetApplicationName(string appName) {
            this.Invoke("SetApplicationName", new object[] {
                        appName});
        }
        
        /// <remarks/>
        public void SetApplicationNameAsync(string appName) {
            this.SetApplicationNameAsync(appName, null);
        }
        
        /// <remarks/>
        public void SetApplicationNameAsync(string appName, object userState) {
            if ((this.SetApplicationNameOperationCompleted == null)) {
                this.SetApplicationNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetApplicationNameOperationCompleted);
            }
            this.InvokeAsync("SetApplicationName", new object[] {
                        appName}, this.SetApplicationNameOperationCompleted, userState);
        }
        
        private void OnSetApplicationNameOperationCompleted(object arg) {
            if ((this.SetApplicationNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetApplicationNameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/GetApplicationName", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetApplicationName() {
            object[] results = this.Invoke("GetApplicationName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetApplicationNameAsync() {
            this.GetApplicationNameAsync(null);
        }
        
        /// <remarks/>
        public void GetApplicationNameAsync(object userState) {
            if ((this.GetApplicationNameOperationCompleted == null)) {
                this.GetApplicationNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetApplicationNameOperationCompleted);
            }
            this.InvokeAsync("GetApplicationName", new object[0], this.GetApplicationNameOperationCompleted, userState);
        }
        
        private void OnGetApplicationNameOperationCompleted(object arg) {
            if ((this.GetApplicationNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetApplicationNameCompleted(this, new GetApplicationNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void CreateUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void DeleteUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void ChangePasswordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void ResetUserPasswordCompletedEventHandler(object sender, ResetUserPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResetUserPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResetUserPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetUserListCompletedEventHandler(object sender, GetUserListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void FindUserCompletedEventHandler(object sender, FindUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void CreateSiteMappingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetSiteMappingCompletedEventHandler(object sender, GetSiteMappingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiteMappingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSiteMappingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void SetApplicationNameCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetApplicationNameCompletedEventHandler(object sender, GetApplicationNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetApplicationNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetApplicationNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591