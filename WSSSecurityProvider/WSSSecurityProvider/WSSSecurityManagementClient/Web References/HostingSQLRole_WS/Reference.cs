//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1433.
// 
#pragma warning disable 1591

namespace MyLocalBroadband.WSSSecurityManagement.Client.HostingSQLRole_WS {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SQLRoleServiceSoap", Namespace="http://www.mylocalbroadband.com/")]
    public partial class SQLRoleService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddUsersToRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUsersToRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUserToRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUserToRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback RoleExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindUsersInRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRolesForUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsersInRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsUserInRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUserFromRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUserFromRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUsersFromRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUsersFromRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateSiteMappingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSiteMappingOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SQLRoleService() {
            this.Url = global::MyLocalBroadband.WSSSecurityManagement.Client.Properties.Settings.Default.MyLocalBroadband_WSSSecurityManagement_Client_HostingSQLRole_WS_SQLRoleService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AddUsersToRoleCompletedEventHandler AddUsersToRoleCompleted;
        
        /// <remarks/>
        public event AddUsersToRolesCompletedEventHandler AddUsersToRolesCompleted;
        
        /// <remarks/>
        public event AddUserToRoleCompletedEventHandler AddUserToRoleCompleted;
        
        /// <remarks/>
        public event AddUserToRolesCompletedEventHandler AddUserToRolesCompleted;
        
        /// <remarks/>
        public event RoleExistsCompletedEventHandler RoleExistsCompleted;
        
        /// <remarks/>
        public event GetAllRolesCompletedEventHandler GetAllRolesCompleted;
        
        /// <remarks/>
        public event CreateRoleCompletedEventHandler CreateRoleCompleted;
        
        /// <remarks/>
        public event DeleteRoleCompletedEventHandler DeleteRoleCompleted;
        
        /// <remarks/>
        public event FindUsersInRoleCompletedEventHandler FindUsersInRoleCompleted;
        
        /// <remarks/>
        public event GetRolesForUserCompletedEventHandler GetRolesForUserCompleted;
        
        /// <remarks/>
        public event GetUsersInRoleCompletedEventHandler GetUsersInRoleCompleted;
        
        /// <remarks/>
        public event IsUserInRoleCompletedEventHandler IsUserInRoleCompleted;
        
        /// <remarks/>
        public event RemoveUserFromRoleCompletedEventHandler RemoveUserFromRoleCompleted;
        
        /// <remarks/>
        public event RemoveUserFromRolesCompletedEventHandler RemoveUserFromRolesCompleted;
        
        /// <remarks/>
        public event RemoveUsersFromRoleCompletedEventHandler RemoveUsersFromRoleCompleted;
        
        /// <remarks/>
        public event RemoveUsersFromRolesCompletedEventHandler RemoveUsersFromRolesCompleted;
        
        /// <remarks/>
        public event CreateSiteMappingCompletedEventHandler CreateSiteMappingCompleted;
        
        /// <remarks/>
        public event GetSiteMappingCompletedEventHandler GetSiteMappingCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/AddUsersToRole", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddUsersToRole(string appName, bool MappedApplication, string[] usernames, string roleName) {
            this.Invoke("AddUsersToRole", new object[] {
                        appName,
                        MappedApplication,
                        usernames,
                        roleName});
        }
        
        /// <remarks/>
        public void AddUsersToRoleAsync(string appName, bool MappedApplication, string[] usernames, string roleName) {
            this.AddUsersToRoleAsync(appName, MappedApplication, usernames, roleName, null);
        }
        
        /// <remarks/>
        public void AddUsersToRoleAsync(string appName, bool MappedApplication, string[] usernames, string roleName, object userState) {
            if ((this.AddUsersToRoleOperationCompleted == null)) {
                this.AddUsersToRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUsersToRoleOperationCompleted);
            }
            this.InvokeAsync("AddUsersToRole", new object[] {
                        appName,
                        MappedApplication,
                        usernames,
                        roleName}, this.AddUsersToRoleOperationCompleted, userState);
        }
        
        private void OnAddUsersToRoleOperationCompleted(object arg) {
            if ((this.AddUsersToRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUsersToRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/AddUsersToRoles", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddUsersToRoles(string appName, bool MappedApplication, string[] usernames, string[] roleNames) {
            this.Invoke("AddUsersToRoles", new object[] {
                        appName,
                        MappedApplication,
                        usernames,
                        roleNames});
        }
        
        /// <remarks/>
        public void AddUsersToRolesAsync(string appName, bool MappedApplication, string[] usernames, string[] roleNames) {
            this.AddUsersToRolesAsync(appName, MappedApplication, usernames, roleNames, null);
        }
        
        /// <remarks/>
        public void AddUsersToRolesAsync(string appName, bool MappedApplication, string[] usernames, string[] roleNames, object userState) {
            if ((this.AddUsersToRolesOperationCompleted == null)) {
                this.AddUsersToRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUsersToRolesOperationCompleted);
            }
            this.InvokeAsync("AddUsersToRoles", new object[] {
                        appName,
                        MappedApplication,
                        usernames,
                        roleNames}, this.AddUsersToRolesOperationCompleted, userState);
        }
        
        private void OnAddUsersToRolesOperationCompleted(object arg) {
            if ((this.AddUsersToRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUsersToRolesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/AddUserToRole", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddUserToRole(string appName, bool MappedApplication, string username, string roleName) {
            this.Invoke("AddUserToRole", new object[] {
                        appName,
                        MappedApplication,
                        username,
                        roleName});
        }
        
        /// <remarks/>
        public void AddUserToRoleAsync(string appName, bool MappedApplication, string username, string roleName) {
            this.AddUserToRoleAsync(appName, MappedApplication, username, roleName, null);
        }
        
        /// <remarks/>
        public void AddUserToRoleAsync(string appName, bool MappedApplication, string username, string roleName, object userState) {
            if ((this.AddUserToRoleOperationCompleted == null)) {
                this.AddUserToRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserToRoleOperationCompleted);
            }
            this.InvokeAsync("AddUserToRole", new object[] {
                        appName,
                        MappedApplication,
                        username,
                        roleName}, this.AddUserToRoleOperationCompleted, userState);
        }
        
        private void OnAddUserToRoleOperationCompleted(object arg) {
            if ((this.AddUserToRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUserToRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/AddUserToRoles", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddUserToRoles(string appName, bool MappedApplication, string username, string[] roleNames) {
            this.Invoke("AddUserToRoles", new object[] {
                        appName,
                        MappedApplication,
                        username,
                        roleNames});
        }
        
        /// <remarks/>
        public void AddUserToRolesAsync(string appName, bool MappedApplication, string username, string[] roleNames) {
            this.AddUserToRolesAsync(appName, MappedApplication, username, roleNames, null);
        }
        
        /// <remarks/>
        public void AddUserToRolesAsync(string appName, bool MappedApplication, string username, string[] roleNames, object userState) {
            if ((this.AddUserToRolesOperationCompleted == null)) {
                this.AddUserToRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserToRolesOperationCompleted);
            }
            this.InvokeAsync("AddUserToRoles", new object[] {
                        appName,
                        MappedApplication,
                        username,
                        roleNames}, this.AddUserToRolesOperationCompleted, userState);
        }
        
        private void OnAddUserToRolesOperationCompleted(object arg) {
            if ((this.AddUserToRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUserToRolesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/RoleExists", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RoleExists(string appName, bool MappedApplication, string roleName) {
            object[] results = this.Invoke("RoleExists", new object[] {
                        appName,
                        MappedApplication,
                        roleName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RoleExistsAsync(string appName, bool MappedApplication, string roleName) {
            this.RoleExistsAsync(appName, MappedApplication, roleName, null);
        }
        
        /// <remarks/>
        public void RoleExistsAsync(string appName, bool MappedApplication, string roleName, object userState) {
            if ((this.RoleExistsOperationCompleted == null)) {
                this.RoleExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRoleExistsOperationCompleted);
            }
            this.InvokeAsync("RoleExists", new object[] {
                        appName,
                        MappedApplication,
                        roleName}, this.RoleExistsOperationCompleted, userState);
        }
        
        private void OnRoleExistsOperationCompleted(object arg) {
            if ((this.RoleExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RoleExistsCompleted(this, new RoleExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/GetAllRoles", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetAllRoles(string appName, bool MappedApplication) {
            object[] results = this.Invoke("GetAllRoles", new object[] {
                        appName,
                        MappedApplication});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllRolesAsync(string appName, bool MappedApplication) {
            this.GetAllRolesAsync(appName, MappedApplication, null);
        }
        
        /// <remarks/>
        public void GetAllRolesAsync(string appName, bool MappedApplication, object userState) {
            if ((this.GetAllRolesOperationCompleted == null)) {
                this.GetAllRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllRolesOperationCompleted);
            }
            this.InvokeAsync("GetAllRoles", new object[] {
                        appName,
                        MappedApplication}, this.GetAllRolesOperationCompleted, userState);
        }
        
        private void OnGetAllRolesOperationCompleted(object arg) {
            if ((this.GetAllRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllRolesCompleted(this, new GetAllRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/CreateRole", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateRole(string appName, bool MappedApplication, string roleName) {
            this.Invoke("CreateRole", new object[] {
                        appName,
                        MappedApplication,
                        roleName});
        }
        
        /// <remarks/>
        public void CreateRoleAsync(string appName, bool MappedApplication, string roleName) {
            this.CreateRoleAsync(appName, MappedApplication, roleName, null);
        }
        
        /// <remarks/>
        public void CreateRoleAsync(string appName, bool MappedApplication, string roleName, object userState) {
            if ((this.CreateRoleOperationCompleted == null)) {
                this.CreateRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateRoleOperationCompleted);
            }
            this.InvokeAsync("CreateRole", new object[] {
                        appName,
                        MappedApplication,
                        roleName}, this.CreateRoleOperationCompleted, userState);
        }
        
        private void OnCreateRoleOperationCompleted(object arg) {
            if ((this.CreateRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/DeleteRole", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteRole(string appName, bool MappedApplication, string roleName) {
            object[] results = this.Invoke("DeleteRole", new object[] {
                        appName,
                        MappedApplication,
                        roleName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteRoleAsync(string appName, bool MappedApplication, string roleName) {
            this.DeleteRoleAsync(appName, MappedApplication, roleName, null);
        }
        
        /// <remarks/>
        public void DeleteRoleAsync(string appName, bool MappedApplication, string roleName, object userState) {
            if ((this.DeleteRoleOperationCompleted == null)) {
                this.DeleteRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteRoleOperationCompleted);
            }
            this.InvokeAsync("DeleteRole", new object[] {
                        appName,
                        MappedApplication,
                        roleName}, this.DeleteRoleOperationCompleted, userState);
        }
        
        private void OnDeleteRoleOperationCompleted(object arg) {
            if ((this.DeleteRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteRoleCompleted(this, new DeleteRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/FindUsersInRole", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] FindUsersInRole(string appName, bool MappedApplication, string roleName, string usernameToMatch) {
            object[] results = this.Invoke("FindUsersInRole", new object[] {
                        appName,
                        MappedApplication,
                        roleName,
                        usernameToMatch});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void FindUsersInRoleAsync(string appName, bool MappedApplication, string roleName, string usernameToMatch) {
            this.FindUsersInRoleAsync(appName, MappedApplication, roleName, usernameToMatch, null);
        }
        
        /// <remarks/>
        public void FindUsersInRoleAsync(string appName, bool MappedApplication, string roleName, string usernameToMatch, object userState) {
            if ((this.FindUsersInRoleOperationCompleted == null)) {
                this.FindUsersInRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindUsersInRoleOperationCompleted);
            }
            this.InvokeAsync("FindUsersInRole", new object[] {
                        appName,
                        MappedApplication,
                        roleName,
                        usernameToMatch}, this.FindUsersInRoleOperationCompleted, userState);
        }
        
        private void OnFindUsersInRoleOperationCompleted(object arg) {
            if ((this.FindUsersInRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindUsersInRoleCompleted(this, new FindUsersInRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/GetRolesForUser", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetRolesForUser(string appName, bool MappedApplication, string username) {
            object[] results = this.Invoke("GetRolesForUser", new object[] {
                        appName,
                        MappedApplication,
                        username});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRolesForUserAsync(string appName, bool MappedApplication, string username) {
            this.GetRolesForUserAsync(appName, MappedApplication, username, null);
        }
        
        /// <remarks/>
        public void GetRolesForUserAsync(string appName, bool MappedApplication, string username, object userState) {
            if ((this.GetRolesForUserOperationCompleted == null)) {
                this.GetRolesForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRolesForUserOperationCompleted);
            }
            this.InvokeAsync("GetRolesForUser", new object[] {
                        appName,
                        MappedApplication,
                        username}, this.GetRolesForUserOperationCompleted, userState);
        }
        
        private void OnGetRolesForUserOperationCompleted(object arg) {
            if ((this.GetRolesForUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRolesForUserCompleted(this, new GetRolesForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/GetUsersInRole", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetUsersInRole(string appName, bool MappedApplication, string roleName) {
            object[] results = this.Invoke("GetUsersInRole", new object[] {
                        appName,
                        MappedApplication,
                        roleName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUsersInRoleAsync(string appName, bool MappedApplication, string roleName) {
            this.GetUsersInRoleAsync(appName, MappedApplication, roleName, null);
        }
        
        /// <remarks/>
        public void GetUsersInRoleAsync(string appName, bool MappedApplication, string roleName, object userState) {
            if ((this.GetUsersInRoleOperationCompleted == null)) {
                this.GetUsersInRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsersInRoleOperationCompleted);
            }
            this.InvokeAsync("GetUsersInRole", new object[] {
                        appName,
                        MappedApplication,
                        roleName}, this.GetUsersInRoleOperationCompleted, userState);
        }
        
        private void OnGetUsersInRoleOperationCompleted(object arg) {
            if ((this.GetUsersInRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsersInRoleCompleted(this, new GetUsersInRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/IsUserInRole", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsUserInRole(string appName, bool MappedApplication, string username, string roleName) {
            object[] results = this.Invoke("IsUserInRole", new object[] {
                        appName,
                        MappedApplication,
                        username,
                        roleName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsUserInRoleAsync(string appName, bool MappedApplication, string username, string roleName) {
            this.IsUserInRoleAsync(appName, MappedApplication, username, roleName, null);
        }
        
        /// <remarks/>
        public void IsUserInRoleAsync(string appName, bool MappedApplication, string username, string roleName, object userState) {
            if ((this.IsUserInRoleOperationCompleted == null)) {
                this.IsUserInRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsUserInRoleOperationCompleted);
            }
            this.InvokeAsync("IsUserInRole", new object[] {
                        appName,
                        MappedApplication,
                        username,
                        roleName}, this.IsUserInRoleOperationCompleted, userState);
        }
        
        private void OnIsUserInRoleOperationCompleted(object arg) {
            if ((this.IsUserInRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsUserInRoleCompleted(this, new IsUserInRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/RemoveUserFromRole", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveUserFromRole(string appName, bool MappedApplication, string username, string roleName) {
            this.Invoke("RemoveUserFromRole", new object[] {
                        appName,
                        MappedApplication,
                        username,
                        roleName});
        }
        
        /// <remarks/>
        public void RemoveUserFromRoleAsync(string appName, bool MappedApplication, string username, string roleName) {
            this.RemoveUserFromRoleAsync(appName, MappedApplication, username, roleName, null);
        }
        
        /// <remarks/>
        public void RemoveUserFromRoleAsync(string appName, bool MappedApplication, string username, string roleName, object userState) {
            if ((this.RemoveUserFromRoleOperationCompleted == null)) {
                this.RemoveUserFromRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserFromRoleOperationCompleted);
            }
            this.InvokeAsync("RemoveUserFromRole", new object[] {
                        appName,
                        MappedApplication,
                        username,
                        roleName}, this.RemoveUserFromRoleOperationCompleted, userState);
        }
        
        private void OnRemoveUserFromRoleOperationCompleted(object arg) {
            if ((this.RemoveUserFromRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUserFromRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/RemoveUserFromRoles", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveUserFromRoles(string appName, bool MappedApplication, string username, string[] roleNames) {
            this.Invoke("RemoveUserFromRoles", new object[] {
                        appName,
                        MappedApplication,
                        username,
                        roleNames});
        }
        
        /// <remarks/>
        public void RemoveUserFromRolesAsync(string appName, bool MappedApplication, string username, string[] roleNames) {
            this.RemoveUserFromRolesAsync(appName, MappedApplication, username, roleNames, null);
        }
        
        /// <remarks/>
        public void RemoveUserFromRolesAsync(string appName, bool MappedApplication, string username, string[] roleNames, object userState) {
            if ((this.RemoveUserFromRolesOperationCompleted == null)) {
                this.RemoveUserFromRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserFromRolesOperationCompleted);
            }
            this.InvokeAsync("RemoveUserFromRoles", new object[] {
                        appName,
                        MappedApplication,
                        username,
                        roleNames}, this.RemoveUserFromRolesOperationCompleted, userState);
        }
        
        private void OnRemoveUserFromRolesOperationCompleted(object arg) {
            if ((this.RemoveUserFromRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUserFromRolesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/RemoveUsersFromRole", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveUsersFromRole(string appName, bool MappedApplication, string[] usernames, string roleName) {
            this.Invoke("RemoveUsersFromRole", new object[] {
                        appName,
                        MappedApplication,
                        usernames,
                        roleName});
        }
        
        /// <remarks/>
        public void RemoveUsersFromRoleAsync(string appName, bool MappedApplication, string[] usernames, string roleName) {
            this.RemoveUsersFromRoleAsync(appName, MappedApplication, usernames, roleName, null);
        }
        
        /// <remarks/>
        public void RemoveUsersFromRoleAsync(string appName, bool MappedApplication, string[] usernames, string roleName, object userState) {
            if ((this.RemoveUsersFromRoleOperationCompleted == null)) {
                this.RemoveUsersFromRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUsersFromRoleOperationCompleted);
            }
            this.InvokeAsync("RemoveUsersFromRole", new object[] {
                        appName,
                        MappedApplication,
                        usernames,
                        roleName}, this.RemoveUsersFromRoleOperationCompleted, userState);
        }
        
        private void OnRemoveUsersFromRoleOperationCompleted(object arg) {
            if ((this.RemoveUsersFromRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUsersFromRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/RemoveUsersFromRoles", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveUsersFromRoles(string appName, bool MappedApplication, string[] usernames, string[] roleNames) {
            this.Invoke("RemoveUsersFromRoles", new object[] {
                        appName,
                        MappedApplication,
                        usernames,
                        roleNames});
        }
        
        /// <remarks/>
        public void RemoveUsersFromRolesAsync(string appName, bool MappedApplication, string[] usernames, string[] roleNames) {
            this.RemoveUsersFromRolesAsync(appName, MappedApplication, usernames, roleNames, null);
        }
        
        /// <remarks/>
        public void RemoveUsersFromRolesAsync(string appName, bool MappedApplication, string[] usernames, string[] roleNames, object userState) {
            if ((this.RemoveUsersFromRolesOperationCompleted == null)) {
                this.RemoveUsersFromRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUsersFromRolesOperationCompleted);
            }
            this.InvokeAsync("RemoveUsersFromRoles", new object[] {
                        appName,
                        MappedApplication,
                        usernames,
                        roleNames}, this.RemoveUsersFromRolesOperationCompleted, userState);
        }
        
        private void OnRemoveUsersFromRolesOperationCompleted(object arg) {
            if ((this.RemoveUsersFromRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUsersFromRolesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/CreateSiteMapping", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateSiteMapping(string appName, string siteURL) {
            this.Invoke("CreateSiteMapping", new object[] {
                        appName,
                        siteURL});
        }
        
        /// <remarks/>
        public void CreateSiteMappingAsync(string appName, string siteURL) {
            this.CreateSiteMappingAsync(appName, siteURL, null);
        }
        
        /// <remarks/>
        public void CreateSiteMappingAsync(string appName, string siteURL, object userState) {
            if ((this.CreateSiteMappingOperationCompleted == null)) {
                this.CreateSiteMappingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSiteMappingOperationCompleted);
            }
            this.InvokeAsync("CreateSiteMapping", new object[] {
                        appName,
                        siteURL}, this.CreateSiteMappingOperationCompleted, userState);
        }
        
        private void OnCreateSiteMappingOperationCompleted(object arg) {
            if ((this.CreateSiteMappingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSiteMappingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mylocalbroadband.com/GetSiteMapping", RequestNamespace="http://www.mylocalbroadband.com/", ResponseNamespace="http://www.mylocalbroadband.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSiteMapping(string siteURL) {
            object[] results = this.Invoke("GetSiteMapping", new object[] {
                        siteURL});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSiteMappingAsync(string siteURL) {
            this.GetSiteMappingAsync(siteURL, null);
        }
        
        /// <remarks/>
        public void GetSiteMappingAsync(string siteURL, object userState) {
            if ((this.GetSiteMappingOperationCompleted == null)) {
                this.GetSiteMappingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiteMappingOperationCompleted);
            }
            this.InvokeAsync("GetSiteMapping", new object[] {
                        siteURL}, this.GetSiteMappingOperationCompleted, userState);
        }
        
        private void OnGetSiteMappingOperationCompleted(object arg) {
            if ((this.GetSiteMappingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiteMappingCompleted(this, new GetSiteMappingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void AddUsersToRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void AddUsersToRolesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void AddUserToRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void AddUserToRolesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RoleExistsCompletedEventHandler(object sender, RoleExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RoleExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RoleExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetAllRolesCompletedEventHandler(object sender, GetAllRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void CreateRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void DeleteRoleCompletedEventHandler(object sender, DeleteRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void FindUsersInRoleCompletedEventHandler(object sender, FindUsersInRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindUsersInRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindUsersInRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetRolesForUserCompletedEventHandler(object sender, GetRolesForUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRolesForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRolesForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetUsersInRoleCompletedEventHandler(object sender, GetUsersInRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsersInRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsersInRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void IsUserInRoleCompletedEventHandler(object sender, IsUserInRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsUserInRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsUserInRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RemoveUserFromRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RemoveUserFromRolesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RemoveUsersFromRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RemoveUsersFromRolesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void CreateSiteMappingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetSiteMappingCompletedEventHandler(object sender, GetSiteMappingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiteMappingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSiteMappingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591